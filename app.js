// // const responses = ["c", "a", "b", "a", "c"];
// // const emojis = ["‚úîÔ∏è", "‚ú®", "üëÄ", "üò≠", "üëé"];

// // Fonction pour valider les r√©ponses et colorier les bonnes et mauvaises r√©ponses
// function validerReponses() {
//   // Bonnes r√©ponses
//   const bonnesReponses = {
//     empereur: "napoleon",
//     independance: "4 juillet 1776",
//     empire: "476 ap J-C",
//     slovenie: "Ljubljana",
//     irlande: "4,9 Millions",
//   };

//   // On parcourt chaque question
//   for (let question in bonnesReponses) {
//     // On r√©cup√®re l'√©l√©ment radio s√©lectionn√© pour cette question
//     let selectedOption = document.querySelector(
//       `input[name="${question}"]:checked`
//     );

//     // Si l'utilisateur n'a pas s√©lectionn√© de r√©ponse pour cette question
//     if (!selectedOption) {
//       alert(`Vous n'avez pas r√©pondu √† la question : "${question}"`);
//       return;
//     }

//     // On r√©cup√®re la bonne r√©ponse
//     let bonneReponse = bonnesReponses[question];

//     // On va maintenant comparer la r√©ponse s√©lectionn√©e √† la bonne r√©ponse
//     let labels = document.querySelectorAll(`input[name="${question}"] + label`);

//     // Parcourir tous les labels pour cette question
//     labels.forEach((label, index) => {
//       // Si la valeur de la r√©ponse est correcte
//       if (
//         selectedOption.value === bonneReponse &&
//         selectedOption.value === label.innerText.trim()
//       ) {
//         label.style.color = "green"; // Bonne r√©ponse en vert
//       } else {
//         label.style.color = "red"; // Mauvaise r√©ponse en rouge
//       }
//     });
//   }
// }

function validerReponses() {
  // Bonnes r√©ponses pour chaque question
  const bonnesReponses = {
    empereur: "napoleon",
    independance: "4 juillet 1776",
    empire: "476 ap J-C",
    slovenie: "Ljubljana",
    irlande: "4,9 Millions",
  };

  // On parcourt chaque question
  for (let question in bonnesReponses) {
    // On r√©cup√®re la r√©ponse s√©lectionn√©e pour cette question
    const selectedOption = document.querySelector(
      `input[name="${question}"]:checked`
    );
    // document.querySelector : Cela permet de s√©lectionner un √©l√©ment dans le DOM

    // input[name="${question}"]:checked : Cela s√©lectionne l'√©l√©ment <input> qui est de type "radio" et qui appartient √† la question en cours (c'est-√†-dire celui qui a le m√™me nom que la cl√© question), et qui est coch√© (:checked).

    // Par exemple, si la question est "empereur" et que l'utilisateur a s√©lectionn√© "Napol√©on", cela va r√©cup√©rer l'√©l√©ment <input> de type radio pour la question "empereur" qui est s√©lectionn√© (coch√©).

    const emojis = {
      correct: "‚úîÔ∏è", // Emoji pour bonne r√©ponse
      incorrect: "‚ùå", // Emoji pour mauvaise r√©ponse
    };

    if (!selectedOption) {
      alert(`Vous n'avez pas r√©pondu √† la question : "${question}"`);
      return;
    }
    // On v√©rifie si l'utilisateur a r√©ellement s√©lectionn√© une r√©ponse pour cette question.

    // Si aucune option n'a √©t√© s√©lectionn√©e (c'est-√†-dire selectedOption est null), on affiche un message d'alerte pour dire √† l'utilisateur qu'il doit r√©pondre √† cette question, puis on arr√™te la fonction (return).

    // Exemple : Si l'utilisateur n'a pas cliqu√© sur de bouton radio pour la question "empereur", il verra une alerte
    const isCorrect = selectedOption.value === bonnesReponses[question];

    // On compare la valeur de la r√©ponse s√©lectionn√©e par l'utilisateur (selectedOption.value) avec la bonne r√©ponse associ√©e √† cette question (bonnesReponses[question]).

    const labels = document.querySelectorAll(
      `label[for="${selectedOption.id}"]`
    );
    // Une fois qu'on sait quelle option a √©t√© s√©lectionn√©e, on veut trouver le label qui est li√© √† cette option.
    // label[for="${selectedOption.id}"] : Ce s√©lecteur CSS s√©lectionne l'√©l√©ment <label> qui est associ√© √† l'option s√©lectionn√©e. L'attribut for du <label> est √©gal √† l'id de l'√©l√©ment <input> s√©lectionn√©.
    // Exemple : Si l'option s√©lectionn√©e a id="napoleon", alors cette ligne va s√©lectionner le <label> qui a for="napoleon".

    // On parcourt chaque label pour colorier les r√©ponses
    labels.forEach((label) => {
      if (isCorrect) {
        label.style.color = "green"; // Bonne r√©ponse en vert
        label.innerHTML += ` ${emojis.correct}`;
      } else {
        label.style.color = "red"; // Mauvaise r√©ponse en rouge
        label.innerHTML += ` ${emojis.incorrect}`;
      }
    });
  }
}

// utiliser trim pour les espaces
